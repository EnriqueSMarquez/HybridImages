%%LAST ONE
function varargout = CVGUI1_export(varargin)

gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @CVGUI1_export_OpeningFcn, ...
                   'gui_OutputFcn',  @CVGUI1_export_OutputFcn, ...
                   'gui_LayoutFcn',  @CVGUI1_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

%EXECUTED FUNCTION BEFORE THE GUI STARTS
function CVGUI1_export_OpeningFcn(hObject, eventdata, handles, varargin)

axis off;
set(handles.hybridButton,'Value',1);


handles.output = hObject;

guidata(hObject, handles);

function varargout = CVGUI1_export_OutputFcn(hObject, eventdata, handles) 

varargout{1} = handles.output;

function maindroplist_CreateFcn(hObject, eventdata, handles)
%INFORMATION ABOUT THE DROPLIST
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function lowPassButton_Callback(hObject, eventdata, handles)
%MAKING SURE ONLY ONE RADIO BUTTON IS PRESSED
set(handles.highPassButton,'Value',0);
set(handles.hybridButton,'Value',0);


function highPassButton_Callback(hObject, eventdata, handles)
%MAKING SURE ONLY ONE RADIO BUTTON IS PRESSED
set(handles.hybridButton,'Value',0);
set(handles.lowPassButton,'Value',0);


function hybridButton_Callback(hObject, eventdata, handles)
%MAKING SURE ONLY ONE RADIO BUTTON IS PRESSED
set(handles.highPassButton,'Value',0);
set(handles.lowPassButton,'Value',0);

function multipleImagesButton_Callback(hObject, eventdata, handles)
%EXECUTED WHEN MULTIPLE IMAGES BUTTON IS PRESSED
%INITIALISING IMAGES
imCat = imread('cat.jpg');
imDog = imread('dog.jpg');
imPlane = imread('plane.bmp');
imBird = imread('bird.bmp');
imMoto = imread('motorcycle.bmp');
imBicy = imread('bicycle.bmp');
imSubmarine = imread('submarine.bmp');
imFish = imread('fish.bmp');
imLetters1 = imread('computerVisionImage1.bmp');
imLetters2 = imread('computerVisionImage2.bmp');

%DETECTING THE VALUE OF SIGMA THAT IS GOING TO BE USED
switch get(get(handles.sigmaButtonGroup,'SelectedObject'),'Tag')
      case 'sigma1',  sigmaVal = 1;
      case 'sigma3',  sigmaVal = 3;
      case 'sigma5',  sigmaVal = 5;    
      case 'sigma7',  sigmaVal = 7;
      case 'sigma9',  sigmaVal = 9;
      case 'sigma15',  sigmaVal = 15;
      case 'sigma21',  sigmaVal = 21;    
      case 'sigma31',  sigmaVal = 31;
end

%DETECTING WICH HYBRID IMAGE IS GOING TO BE SHOWN
contents = cellstr(get(handles.maindroplist,'String'));
val = contents{get(handles.maindroplist,'Value')};
switch val
    case 'CATDOG'
       image1 = imCat;
       image2 = imDog;
    case 'BIRDPLANE'
        image1 = imPlane;
        image2 = imBird;
    case 'SUBFISH'
        image1 = imSubmarine;
        image2 = imFish;
    case 'MOTOBICY'
        image1 = imBicy;
        image2 = imMoto;
    case 'LETTERS'
        image1 = imLetters1;
        image2 = imLetters2;
         
    
end

%DETECTING IF THE IMAGES ARE GOING TO BE SWITCH
if get(handles.changeImagesButton, 'Value') == 1
            tempImage = image1;
            image1 = image2;
            image2 = tempImage;
end

%EXECUTING HYBRID IMAGE ALGORITHM
hybridImageToShow(image1,image2,sigmaVal);

function runButton_Callback(hObject, eventdata, handles)
%EXECUTED WHEN RUN BUTTON IS PRESSED
%CHANGE BUTTON STRING WHEN IS LOADING THE IMAGE


%INITIALISING VARIABLES

imCat = imread('cat.jpg');
imDog = imread('dog.jpg');
imPlane = imread('plane.bmp');
imBird = imread('bird.bmp');
imMoto = imread('motorcycle.bmp');
imBicy = imread('bicycle.bmp');
imSubmarine = imread('submarine.bmp');
imFish = imread('fish.bmp');
imLetters1 = imread('computerVisionImage1.bmp');
imLetters2 = imread('computerVisionImage2.bmp');

%DETECTING IF IS GOING TO BE SHOWN THE HYBRID IMAGE, ONLY THE LOW PASS OR
%ONLY THE HIGH PASS IMAGE
switch get(get(handles.ImageButtonGroup,'SelectedObject'),'Tag')
      case 'hybridButton',  buttonImage = 1;
      case 'highPassButton',  buttonImage = 2;
      case 'lowPassButton',  buttonImage = 3;    
end

%DETECTING VALUE OF SIGMA
switch get(get(handles.sigmaButtonGroup,'SelectedObject'),'Tag')
      case 'sigma1',  sigmaVal = 1;
      case 'sigma3',  sigmaVal = 3;
      case 'sigma5',  sigmaVal = 5;    
      case 'sigma7',  sigmaVal = 7;
      case 'sigma9',  sigmaVal = 9;
      case 'sigma15',  sigmaVal = 15;
      case 'sigma21',  sigmaVal = 21;    
      case 'sigma31',  sigmaVal = 31;
end

%DETECTING WICH IMAGE IS GOING TO BE SHOWN
contents = cellstr(get(handles.maindroplist,'String'));
val = contents{get(handles.maindroplist,'Value')};
switch val
    case 'CATDOG'
       image1 = imCat;
       image2 = imDog;
       
    case 'BIRDPLANE'
        image1 = imPlane;
        image2 = imBird;
    case 'SUBFISH'
        image1 = imSubmarine;
        image2 = imFish;
    case 'MOTOBICY'
        image1 = imBicy;
        image2 = imMoto;
    case 'LETTERS'
        image1 = imLetters1;
        image2 = imLetters2;
                               
end
        %DETENCTING IF THE IMAGES ARE GOING TO BE SWITCH
        if get(handles.changeImagesButton, 'Value') == 1
            tempImage = image1;
            image1 = image2;
            image2 = tempImage;
        end
        %SHOW HYBRID IMAGE IF HYBRID BUTTON IS ON
        if buttonImage == 1
        image1 = hybridImage(image1, image2, sigmaVal);
        end
        %SHOW HIGHPASS IMAGE IF HIGHPASS BUTTON IS ON
        if buttonImage == 2
        winSize = floor(2*sigmaVal+0.5);
        newImage2 = GaussianSmoothing(image1, sigmaVal);
        image1Size = size(image1);
        image1 = image1(winSize:image1Size(1,1,1)-winSize-1,winSize:image1Size(1,2,1)-winSize-1,:) - newImage2;
        image1 = image1 + 100;
        end
        %SHOW LOW PASS IMAGE IF LOW PASS BUTTON IS ON
        if buttonImage == 3
        image1 = GaussianSmoothing(image2, sigmaVal);  
        end
        %SHOW IMAGE IN GRAPH
      handles.graph1 = imshow(image1);
      
      %CHANGE BUTTON STRING WHEN ALGORITHM HAS FINISHED
      
  set(hObject,'String','RUN');
  
  function maindroplist_Callback(hObject, eventdata, handles)
      
  function changeImagesButton_Callback(hObject, eventdata, handles)

  function text2_CreateFcn(hObject, eventdata, handles)
          




% --- Creates and returns a handle to the GUI figure. 
function h1 = CVGUI1_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end
load CVGUI1_export.mat


appdata = [];
appdata.GUIDEOptions = mat{1};
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'Units','characters',...
'Position',[135.666666666667 0.75 197.666666666667 50.3333333333333],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','off',...
'MenuBar','none',...
'Name','Computer Vision',...
'NumberTitle','off',...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'ScreenPixelsPerInchMode','manual',...
'ParentMode','manual',...
'HandleVisibility','callback',...
'Tag','figure1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'graph1';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units','characters',...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[2.5 0.75 161.5 46.1666666666667],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[25.6533333333333 5.53666666666667 18.7466666666667 3.775],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'PlotBoxAspectRatio',[1 0.57172342621259 0.57172342621259],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'XRulerMode',get(0,'defaultaxesXRulerMode'),...
'XTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YRulerMode',get(0,'defaultaxesYRulerMode'),...
'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'XGrid',get(0,'defaultaxesXGrid'),...
'Tag','graph1',...
'ParentMode','manual',...
'Visible',get(0,'defaultaxesVisible'),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.5 1.00496389891697 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','bold',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'IsContainer','off',...
'IsContainerMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.5 -0.0252707581227437 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'IsContainer','off',...
'IsContainerMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.021570038377193 0.5 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'IsContainer','off',...
'IsContainerMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'IsContainer','off',...
'IsContainerMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanel1';

h7 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'Title','CONTROL PANEL',...
'Position',[166.5 1.08333333333333 28 49.1666666666667],...
'ChildrenMode','manual',...
'ParentMode','manual',...
'Tag','uipanel1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'maindroplist';

h8 = uicontrol(...
'Parent',h7,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String',{  'CATDOG'; 'BIRDPLANE'; 'SUBFISH'; 'MOTOBICY'; 'LETTERS'},...
'Style','popupmenu',...
'Value',1,...
'ValueMode',get(0,'defaultuicontrolValueMode'),...
'Position',[2.66666666666667 43.5833333333333 22.1666666666667 3.25],...
'Callback',@(hObject,eventdata)CVGUI1_export('maindroplist_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)CVGUI1_export('maindroplist_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','maindroplist',...
'FontSize',12);

appdata = [];
appdata.lastValidTag = 'sigmaButtonGroup';

h9 = uibuttongroup(...
'Parent',h7,...
'FontUnits','points',...
'Units','characters',...
'Title','Values for Sigma',...
'Position',[1.66666666666667 4.66666666666667 25 19.5833333333333],...
'ParentMode','manual',...
'Tag','sigmaButtonGroup',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma1';

h10 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','1',...
'Style','radiobutton',...
'Value',1,...
'Position',[1.83333333333333 16.1666666666667 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma3';

h11 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','3',...
'Style','radiobutton',...
'Position',[1.66666666666667 14.1666666666667 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma3',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma5';

h12 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','5',...
'Style','radiobutton',...
'Position',[1.66666666666667 12 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma5',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma7';

h13 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','7',...
'Style','radiobutton',...
'Position',[2 9.83333333333333 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma7',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma9';

h14 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','9',...
'Style','radiobutton',...
'Position',[2 7.75 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma9',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma15';

h15 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','15',...
'Style','radiobutton',...
'Position',[2.16666666666667 5.58333333333333 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma15',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma21';

h16 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','21',...
'Style','radiobutton',...
'Position',[2 3.58333333333333 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma21',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'sigma31';

h17 = uicontrol(...
'Parent',h9,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','31',...
'Style','radiobutton',...
'Position',[1.83333333333333 1.66666666666667 15.6666666666667 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','sigma31',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ImageButtonGroup';

h18 = uibuttongroup(...
'Parent',h7,...
'FontUnits','points',...
'Units','characters',...
'Title','Image',...
'Position',[1.5 34.25 25 9.83333333333333],...
'ParentMode','manual',...
'Tag','ImageButtonGroup',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'hybridButton';

h19 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Hybrid Image',...
'Style','radiobutton',...
'Value',1,...
'Position',[1.66666666666667 5.66666666666667 20 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','hybridButton',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'highPassButton';

h20 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','HighPass Image',...
'Style','radiobutton',...
'Position',[1.33333333333333 3.08333333333333 22 1.91666666666667],...
'Callback',@(hObject,eventdata)CVGUI1_export('highPassButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','highPassButton',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'lowPassButton';

h21 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','LowPass Image',...
'Style','radiobutton',...
'Position',[1.5 0.583333333333333 19.3333333333333 1.91666666666667],...
'Children',[],...
'ParentMode','manual',...
'Tag','lowPassButton',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'changeImagesButton';

h22 = uicontrol(...
'Parent',h7,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Change Images',...
'Style','radiobutton',...
'Position',[3.16666666666667 31.5833333333333 21.8333333333333 1.91666666666667],...
'Callback',@(hObject,eventdata)CVGUI1_export('changeImagesButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','changeImagesButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'multipleImagesButton';

h23 = uicontrol(...
'Parent',h7,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Show Multiple Images',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[3 27.0833333333333 22 3.66666666666667],...
'Callback',@(hObject,eventdata)CVGUI1_export('multipleImagesButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','multipleImagesButton',...
'FontSize',12,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'runButton';

h24 = uicontrol(...
'Parent',h7,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','RUN',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[4.16666666666667 1.5 20.8333333333333 3],...
'Callback',@(hObject,eventdata)CVGUI1_export('runButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','runButton',...
'FontSize',13,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text2';

h25 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','COMPUTER VISION FIRST ASSIGNMENT',...
'Style','text',...
'Position',[42 47.75 85.6666666666667 2.16666666666666],...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)CVGUI1_export('text2_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'ButtonDownFcn',@(hObject,eventdata)CVGUI1_export('text2_ButtonDownFcn',hObject,eventdata,guidata(hObject)),...
'Tag','text2',...
'FontSize',16);


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % CVGUI1_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % CVGUI1_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % CVGUI1_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % CVGUI1_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%     if feature('HGUsingMATLABClasses')
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
%     end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end

function [newFullImage] = GaussianSmoothing(image,standardDeviation)
% covariance is being asumed as 1
sigma = standardDeviation;  %SIGMA DECLARATION

if sigma == 0   %%TAKING CARE OF ERRORS THAT MIGHT HAPPEND
sigma = 1;
end

size2 = floor(2*sigma+0.5);     %WINDOW SIZE OF TEMPLATE
if mod(size2,2) ~= 0            %WINDOW SIZE HAS TO BE ODD
    size2 = size2 + 1;
end
%%GETTING VALUES FOR X AND Y FOR GAUSSIAN DISTRIBUTION BETWEEN -WINDOWSIZE
%%AND WINDOW SIZE
[xx,yy] = meshgrid(-size2:size2, -size2:size2); 
%%VALUE OF Z GIVEN X AND Y
zz = exp(-1/(2*sigma^2)*(xx.^2 + yy.^2));
%RESULTING TEMPLATE
template = zz/(2*sigma*sigma*pi);

%INITIALISATION OF IMAGE TO DO GAUSSIAN SMOOTHING
image1 = image;
%DIVIDE RGB IMAGE INTO E SEPARATE IMAGES RED, GREEN AND BLUE
image1red = image1(:,:,1);
image1green = image1(:,:,2);
image1blue = image1(:,:,3);
%GETTING THE SIZE OF THE TEMPLATE
[rowsTemplate, columnsTemplate] = size(template);
%GETTING SIZE OF IMAGE (SINGLE COMPONENT IN THIS CASE RED)
sizeImage1 = size(image1red);
%INITIALISING NEW IMAGE PARAMETERS BASED ON THE SIZE OF THE TEMPLATE
newImage1red = zeros(sizeImage1(1,1)-rowsTemplate+1, sizeImage1(1,2) - columnsTemplate +1);
newImage1green = zeros(sizeImage1(1,1)-rowsTemplate +1, sizeImage1(1,2) - columnsTemplate +1);
newImage1blue = zeros(sizeImage1(1,1)-rowsTemplate +1, sizeImage1(1,2) - columnsTemplate +1);

%LOOP IN THE COLUMNS
for n=columnsTemplate:sizeImage1(1,2)
%LOOP IN THE ROWS
for m=rowsTemplate:sizeImage1(1,1)
    %GET NEW PIXEL FOR NEW IMAGE, AT THE END OF THE LOOPS ALL THE PIXELS
    %IN THE NEW IMAGE ARE GOING TO BE SETTED. THE NEW PIXEL WILL BE THE
    %ADDITION OF ALL THE ELEMENTS IN THE RESULTING MATRIX OF THE
    %ELEMENT-WISE MULTIPLICATION BEETWEN THE PART OF THE IMAGE MATRIX AND
    %THE TEMPLATE. THIS WILL THEREFORE GIVE US THE CONVOLUTION BETWEEN THE
    %TEMPLATE AND THE IMAGE. THIS IS DONE IN EACH COMPONENT (RED,GREEN,BLUE).
    
    newImage1red(m-(rowsTemplate-1),n-(columnsTemplate-1)) = sum(sum(double(template).*double(image1red(m-(rowsTemplate-1):m,n-(columnsTemplate-1):n))));
    newImage1green(m-(rowsTemplate-1),n-(columnsTemplate-1)) = sum(sum(double(template).*double(image1green(m-(rowsTemplate-1):m,n-(columnsTemplate-1):n))));
    newImage1blue(m-(rowsTemplate-1),n-(columnsTemplate-1)) = sum(sum(double(template).*double(image1blue(m-(rowsTemplate-1):m,n-(columnsTemplate-1):n))));
end
end
%CONCATENATE 3 COMPONENTS IN ONLY ONE IMAGE IN ORDER TO SEE THE FULL RGB
%IMAGE
newFullImage = uint8(cat(3,newImage1red,newImage1green,newImage1blue));


function [] = hybridImageToShow(image1,image2,standardDeviation)

%SAME PROGRAM AS hybridImage.m
%THE DIFFERENCE IS THAT THIS WILL SHOW THE IMAGE 5 TIMES IN 5 DIFFERENT
%SIZES IN ORDER TO SEE THE ONE EFFECT THAT IS PRESENTED IN THE HYBRID
%IMAGES

windowSize = floor(2*standardDeviation+0.5); 

part1High = GaussianSmoothing(image1, standardDeviation);
image1Size = size(image1);
highPassImage = image1(windowSize:image1Size(1,1,1)-windowSize-1,windowSize:image1Size(1,2,1)-windowSize-1,:) - part1High;
highPassImage = highPassImage;
lowPassImage = GaussianSmoothing(image2,standardDeviation);
newImage1 = (highPassImage + lowPassImage);
%UNTIL HERE IS THE SAME AS hybridImage.m

%GETTING HYBRID IMAGE SCALED 2 TIMES
newImage2 = imresize(newImage1,2);
%GETTING HYBRID IMAGE SCALED .6 TIMES
newImage3 = imresize(newImage1,.6);
%GETTING HYBRID IMAGE SCALED .4 TIMES
newImage4 = imresize(newImage1,.4);
%GETTING HYBRID IMAGE SCALED .3 TIMES
newImage5 = imresize(newImage1,.3);

sizeOfBiggerImage = size(newImage2);
ratio = sizeOfBiggerImage(1,2)/sizeOfBiggerImage(1,1);

figure('name','COMPUTER VISION ASSIGNMENT 1','units','normalized','position',[0 0 1 1])
%DETECTING IF IMAGES OVERLAPS WITH AXES DECLARED BELOW
%IF THEY DO CHANGE AXES
if ratio > 1.5
%CREATING AXES
H.A(1) = axes('units','normalized','position',[-.01 .2 0.42 0.42]);
H.A(2) = axes('units','normalized','position',[0.4 .2 0.26 0.26]);
H.A(3) = axes('units','normalized','position',[0.65 .2 0.15 0.15]); 
H.A(4) = axes('units','normalized','position',[0.81 .2 0.11 0.11]); 
H.A(5) = axes('units','normalized','position',[0.92 .2 0.05 0.05]); 
else
H.A(1) = axes('units','normalized','position',[-.14 .2 0.58 0.58]);
H.A(2) = axes('units','normalized','position',[0.28 .2 0.38 0.38]);
H.A(3) = axes('units','normalized','position',[0.55 .2 0.28 0.28]); 
H.A(4) = axes('units','normalized','position',[0.76 .2 0.17 0.17]); 
H.A(5) = axes('units','normalized','position',[0.89 .2 0.08 0.08]);  
end

%SHOWING IMAGES
axes(H.A(1));
imshow(newImage2); 
axes(H.A(2));
imshow(newImage1);
axes(H.A(3));
imshow(newImage3); 
axes(H.A(4));
imshow(newImage4);
axes(H.A(5));
imshow(newImage5);

function [newImage1] = hybridImage(image1,image2,standardDeviation)

%WINDOW SIZE DEPENDING ON SIGMA
windowSize = floor(2*standardDeviation+0.5);
%FIRST PART OF THE IMAGE AFTER HIGHPASS FILTER
part1High = GaussianSmoothing(image1, standardDeviation);
%IMAGE SIZE
image1Size = size(image1);
%HIGHPASS IMAGE WITH POSITIVE AND NEGATIVE VALUES
highPassImage = image1(windowSize:image1Size(1,1,1)-windowSize-1,windowSize:image1Size(1,2,1)-windowSize-1,:) - part1High;
%ADDING CONSTANT TO MAKE BRIGHT VALUES POSITIVE AND DARK VALUES NEGATIVE
highPassImage = highPassImage + 20;

%GETTING LOW PASS IMAGE
lowPassImage = GaussianSmoothing(image2,standardDeviation);
%FINALLY GETTING HYBRID IMAGE
newImage1 = (uint8(highPassImage) + uint8(lowPassImage));


